"
" Use mouse
"

set mouse=a
set ttym=xterm2

"
" OS X
"

" Check we're on OS X.
if (system('uname') =~ "darwin")

  "
  " OS X Clipboard
  "

  " Yank text to the OS X clipboard.
  set clipboard=unnamed

  " Preserve indentation while pasting text from the OS X clipboard.
  noremap <leader>p :set paste<CR>:put  *<CR>:set nopaste<CR>

  "
  " Marked
  "

  " Open with Marked.
  nnoremap <leader>m :MarkedOpen!<CR>
  " :nnoremap <leader>m :silent !open -a "Marked 2.app" '%:p'<cr>
endif

"
" Markdown
"

" FormD
if executable('formd')
  nmap <leader>fr :%! formd -r<CR>
  nmap <leader>fi :%! formd -i<CR>
endif

" Markdown2HTML
if executable('mmd')
  nmap <leader>md :%!mmd --to=html --smart --notes --mask --process-html<cr>
endif

"
" Numbers in sidebar
"

nnoremap <F3> :NumbersToggle<CR>

"
" Color scheme
"

" solarized color scheme
syntax enable
set background=dark
" set background=light
colorscheme solarized

"
" Spell checking
"

" Turn on spell checking.
set spell

"
" NERDtree
"

if exists(":NERDTree")

  " Show hidden files in NERDTree.
  let NERDTreeShowHidden=1

  " Ignore files.
  let NERDTreeIgnore=[
  \   '\.DS_Store$',
  \   '\.vim$'
  \ ]

  " Close NERDTree on open.
  let NERDTreeQuitOnOpen = 1
endif

"
" NERDCommenter
"

let NERDSpaceDelims=1

"
" Taskpaper
"

" To change the default date format string used when marking a task complete, define the `task_paper_date_format` variable. The format matches your system's `strftime()` function. For example, to include the date and time in ISO8601 format:
let g:task_paper_date_format = "%Y-%m-%dT%H:%M:%S%z"

" To change the default archive project name, define the `task_paper_archive_project` variable.  The default value is "Archive".
let g:task_paper_archive_project = "Archive"

" By default, when you move a task, the cursor will follow that task to its new location.  To make the cursor stay in it's current location, change the `task_paper_follow_move` variable.
let g:task_paper_follow_move = 0

" If you want to hide done tasks when searching you can change the `task_paper_search_hide_done` variable.
let g:task_paper_search_hide_done = 1

" To set a custom style (colour, bold, etc.) for tags task_paper_styles variable, which is a dictionary.
let g:task_paper_styles={'wait': 'ctermfg=Blue guifg=Blue', 'FAIL': 'ctermbg=Red guibg=Red'}

" See |highlight-args| for a full description of the syntax.

"
" Highlight search
"

" NOTE: Doesn't work under Cygwin for some unknown reason.
if !has("win32unix")
  nnoremap <silent> <esc> :noh<cr><esc>
endif

"
" Git
"

" Turn on plugin indenting for git commit messages.
filetype indent plugin on

" Insert at the end of the first line in a git commit message.
autocmd VimEnter * execute "normal A"

"
" Whitespace
"

function! TrimWhiteSpace()
  %s/\s\+$//e
endfunction

" Delete whitespace from the current line
nnoremap <silent> <Leader>rtws :call TrimWhiteSpace()<CR>

" Delete whitespace on write
" autocmd FileWritePre    * :call TrimWhiteSpace()
" autocmd FileAppendPre   * :call TrimWhiteSpace()
" autocmd FilterWritePre  * :call TrimWhiteSpace()
" autocmd BufWritePre     * :call TrimWhiteSpace()

" Flags is '' to clear highlighting, or is a string to specify what to highlight (one or more characters):
"   e  whitespace at end of line
"   i  spaces used for indenting
"   s  spaces before a tab
"   t  tabs not at start of line
function! ShowWhitespace(flags)
  let bad = ''
  let pat = []
  for c in split(a:flags, '\zs')
    if c == 'e'
      call add(pat, '\s\+$')
    elseif c == 'i'
      call add(pat, '^\t*\zs \+')
    elseif c == 's'
      call add(pat, ' \+\ze\t')
    elseif c == 't'
      call add(pat, '[^\t]\zs\t\+')
    else
      let bad .= c
    endif
  endfor
  if len(pat) > 0
    let s = join(pat, '\|')
    exec 'syntax match ExtraWhitespace "'.s.'" containedin=ALL'
  else
    syntax clear ExtraWhitespace
  endif
  if len(bad) > 0
    echo 'ShowWhitespace ignored: '.bad
  endif
endfunction

function! ToggleShowWhitespace()
  if !exists('b:ws_show')
    let b:ws_show = 0
  endif
  if !exists('b:ws_flags')
    let b:ws_flags = 'eist'  " default (which whitespace to show)
  endif
  let b:ws_show = !b:ws_show
  if b:ws_show
    call ShowWhitespace(b:ws_flags)
  else
    call ShowWhitespace('')
  endif
endfunction

nnoremap <Leader>ws :call ToggleShowWhitespace()<CR>
highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen

" au BufEnter * match ExtraWhitespace /\S\zs\s\+$/
" au InsertEnter * match ExtraWhitespace /\S\zs\s\+\%#\@<!$/
" au InsertLeave * match ExtraWhiteSpace /\S\zs\s\+$/

"
" Airline customization
"

" Smarter tab line
let g:airline#extensions#tabline#enabled = 1

" Define seperators
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

" Ensure powerline symbols are loaded
let g:airline_powerline_fonts = 1

"
" Typewriter mode
"

" Keep the focus on the current line
" set scrolloff=999

"
" Unimpaired
"

" Exchange single lines
nmap <C-K> [e
nmap <C-J> ]e

" Exchange multiple lines
vmap <C-K> [egv
vmap <C-J> ]egv

"
" Miscellaneous
"

" Allow saving of files as sudo when I forgot to start vim using sudo.
" NOTE: http://stackoverflow.com/a/7078429
cmap w!! w !sudo tee > /dev/null %

" Visually select the text that was last edited/pasted.
nmap gV `[v`]

" Use Ag instead of Ack with ack.vim.
if executable('ag')
  let g:ackprg = 'ag --nogroup --nocolor --column'
endif

"
" Window splitting
"

" More natural splitting
set splitbelow
set splitright

" Simplify window movement
" nnoremap <C-J> <C-W><C-J>
" nnoremap <C-K> <C-W><C-K>
" nnoremap <C-L> <C-W><C-L>
" nnoremap <C-H> <C-W><C-H>

"
" Clam settings
"

nnoremap ! :Clam<space>
vnoremap ! :ClamVisual<space>

"
" Reassign arrow keys for line movement
"

nmap <Up> [e
vmap <Up> [egv
nmap <Down> ]e
vmap <Down> ]egv
nmap <Left> <<
vmap <Left> <gv
nmap <Right> >>
vmap <Right> >gv

"
" Formatting
"

" Set tab formatting to 4 column tabs -> like Windows developers.
set tabstop=4 softtabstop=4 shiftwidth=4 noexpandtab

" Set tab formatting to 8 column tabs -> like Linux kernel developers.
" set tabstop=8 softtabstop=8 shiftwidth=8 noexpandtab

" Allow for word wrapping.
set wrap
set linebreak
set nolist

" indent with text
if exists('+breakindent')

  " break character
  set showbreak=╎
  set breakindent
endif

" Folding settings.
set foldmethod=indent   " fold based on indent
set foldnestmax=10      " deepest fold is 10 levels
set nofoldenable        " dont fold by default
set foldlevel=1         " this is just what I use

" Shortcut to rapidly toggle `set list`.
nmap <leader><leader>l :set list!<CR>

" Use the same symbols as TextMate for tabstops and EOLs.
set listchars+=tab:▸\ ,eol:¬

"
" Switch
"

nnoremap - :Switch<cr>

"
" LanguageTool
"

let g:languagetool_jar='/Applications/LanguageTool-2.6/languagetool-commandline.jar'

"
" Set abnormal filetypes
"

au! BufNewFile,BufRead *.plt,*.gnuplot setf gnuplot
au! BufNewFile,BufRead *.applescript setf applescript

"
" Jekyll
"

let g:jekyll_site_dir = '_site'

"
" BufferGator fix
"

nmap <leader>b :BuffergatorToggle<CR>

"
" Prevent vim from writing newlines.
"

" :set wrap
" :set linebreak
" :set nolist  " list disables linebreak
" :set textwidth=0
" :set wrapmargin=0

"
" Easily open files with edit.
"	NOTE: http://vimcasts.org/episodes/the-edit-command/
"

cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<CR>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

"
" Persistent undo
"

set undofile                " Save undo's after file closes
set undodir=$HOME/.vim/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo

"
" NeoComplete
"

" For some reason this command doesn't work:
"   let g:neocomplete#enable_at_startup = 1
"
" Use this autocmd instead.
" NOTE: https://github.com/Shougo/neocomplete.vim/issues/398
autocmd VimEnter * NeoCompleteEnable

" Disable AutoComplPop.
" NOTE: This option must set it in .vimrc(_vimrc). NOT IN .gvimrc(_gvimrc)!
let g:acp_enableAtStartup = 0

" Use neocomplete.
let g:neocomplete#enable_at_startup = 1

" Use smartcase.
let g:neocomplete#enable_smart_case = 1

" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 2
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme' : $HOME.'/.gosh_completions'
      \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif

let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction

" <TAB>: completion.
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

" Close popup by <Space>.
inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
  "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
  "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
  "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
endif

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

" "
" " UltiSnips and NeoComplete
" "

" " NOTE: http://stackoverflow.com/a/22253548
" " Make NeoComplete compatible with UltiSnips (using supertab).
" let g:SuperTabDefaultCompletionType = '<C-n>'

" " Better key bindings for UltiSnipsExpandTrigger.
" let g:UltiSnipsExpandTrigger="<Tab>"
" let g:UltiSnipsJumpForwardTrigger="<C-j>"
" let g:UltiSnipsJumpBackwardTrigger="<C-k>"

" """

" function! g:UltiSnips_Complete()
" call UltiSnips#ExpandSnippet()
" if g:ulti_expand_res == 0
" if pumvisible()
" return "\<C-n>"
" else
" call UltiSnips#JumpForwards()
" if g:ulti_jump_forwards_res == 0
" return "\<Tab>"
" endif
" endif
" endif
" return ""
" endfunction

" " Intercepts YMC mappings so UltiSnips and YMC can work with the above function.
" au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"

" " UltiSnips Options
" let g:UltiSnipsExpandTrigger="<space>"
" let g:UltiSnipsJumpForwardTrigger="<Tab>"
" let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
" " let g:UltiSnipsListSnippets="<C-e>"
" let g:UltiSnipsEditSplit="horizontal"

"
" UltiSnips and YouCompleteMe
"

" Make YCM compatible with UltiSnips (using supertab).
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" Better key bindings for UltiSnipsExpandTrigger.
let g:UltiSnipsExpandTrigger = "<cr>"
let g:UltiSnipsJumpForwardTrigger = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"

""""

let g:UltiSnipsExpandTrigger = "<c-tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" Enable tabbing through list of results
function! g:UltiSnips_Complete()
  call UltiSnips#ExpandSnippet()
  if g:ulti_expand_res == 0
    if pumvisible()
      return "\<C-n>"
    else
      call UltiSnips#JumpForwards()
      if g:ulti_jump_forwards_res == 0
        return "\<TAB>"
      endif
    endif
  endif
  return ""
endfunction

au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"

" Expand snippet or return
let g:ulti_expand_res = 0
function! Ulti_ExpandOrEnter()
  call UltiSnips#ExpandSnippet()
  if g:ulti_expand_res
    return ''
  else
    return "\<return>"
  endif
endfunction

" Set <space> as primary trigger
inoremap <space> <C-R>=Ulti_ExpandOrEnter()<CR>

"
" Preserve EOL.
"

let g:PreserveNoEOL = 1

"
" Nginx syntax highlighting.
"

au BufRead,BufNewFile /etc/nginx/*,/usr/local/nginx/conf/* if &ft == '' | setfiletype nginx | endif

"
" Paragraph formatting with par.
" NOTE: brew install par
"

if executable('par')
  set textwidth=80
  set formatoptions+=t
  set formatprg=par\ -w80
endif

"
" HTML5 indentation
"

let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"
let g:html_indent_inctags = "address,article,aside,audio,blockquote,canvas,dd,div,dl,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,main,nav,noscript,ol,output,p,pre,section,table,tfoot,ul,video"

"
" Syntastic
"

if exists(":SyntasticCheck")
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0
  let g:syntastic_aggregate_errors = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_auto_jump = 1

  let g:syntastic_javascript_checkers = ['jshint']
  let g:syntastic_scss_checkers = ['scss_lint']
endif

"
" Investigate
"

if exists(":investigate")
  let g:investigate_use_dash=1
endif

"
" Tagbar
"

if exists(":Tagbar")
  nmap <leader>rt :TagbarOpenAutoClose<CR>
endif

"
" Emmet
"

if exists(":Emmet")

  " Only enable Emmet where it's needed.
  let g:user_emmet_install_global = 0
  autocmd FileType html EmmetInstall
  autocmd FileType css EmmetInstall
  autocmd FileType md EmmetInstall
endif

"
" Easytags
"

let g:easytags_events = ['BufWritePost']

"
" Disable Ex mode -> Why? Never use it.
" http://www.bestofvim.com/tip/leave-ex-mode-good/
"

nnoremap Q <nop>

"
" Put output of shell command in a tmp buffer
" http://vim.wikia.com/wiki/Display_output_of_shell_commands_in_new_window
" https://svn.mageekbox.net/repositories/vim/trunk/.vimrc
"

function! s:ExecuteInShell(command, bang)
  let _ = a:bang != '' ? s:_ : a:command == '' ? '' : join(map(split(a:command), 'expand(v:val)'))

  if (_ != '')
    let s:_ = _
    let bufnr = bufnr('%')
    let winnr = bufwinnr('^' . _ . '$')
    silent! execute  winnr < 0 ? 'belowright new ' . fnameescape(_) : winnr .  'wincmd w'
    setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile wrap number
    silent! :%d
    let message = 'Execute ' . _ . '...'
    call append(0, message)
    echo message
    silent! 2d | resize 1 | redraw
    silent! execute 'silent! %!'. _
    silent! execute 'resize ' . line('$')
    silent! execute 'syntax on'
    silent! execute 'autocmd BufUnload <buffer> execute bufwinnr(' . bufnr . ') . ''wincmd w'''
    silent! execute 'autocmd BufEnter <buffer> execute ''resize '' .  line(''$'')'
    silent! execute 'nnoremap <silent> <buffer> <CR> :call <SID>ExecuteInShell(''' . _ . ''', '''')<CR>'
    silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . _ . ''', '''')<CR>'
    silent! execute 'nnoremap <silent> <buffer> <LocalLeader>g :execute bufwinnr(' . bufnr . ') . ''wincmd w''<CR>'
    nnoremap <silent> <buffer> <C-W>_ :execute 'resize ' . line('$')<CR>
    silent! syntax on
  endif
endfunction

command! -complete=shellcmd -nargs=* -bang Shell call s:ExecuteInShell(<q-args>, '<bang>')
cabbrev shell Shell

