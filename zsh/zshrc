#
# Executes commands at the start of an interactive session.
#

#
# Load a custom profile for the local machine and each domain or subdomain it belongs to. (e.g. com, example.com and foo.example.com)
#

parts=(${(s:.:)"$(hostname)"})

for i in {${#parts}..1}; do

  # NOTE: Don't quote profile.
  profile=${(j:.:)${parts[$i,${#parts}]}}
  file="${ZSH_CUSTOM}/profiles/${profile}"

  # Load profile, if one exists.
  if [[ -s "${file}" ]]; then

    # shellcheck source=/dev/null
    source "${file}"
  fi
done

#
# Source Prezto
#

prezto="${ZDOTDIR:-$HOME}/.zprezto/init.zsh"

if [[ -s "${prezto}" ]]; then

  # shellcheck source=/dev/null
  source "${prezto}"
else
  exit
fi

#
# Customize to your needs...
#

#
# Time
#

function datetime() {
  date +'%Y-%m-%d %H:%M:%S.%3N'
}

#
# Timestamp
#

function timestamp() {
  echo "[$(datetime)]"
}

#
# Print an info message to the term
#   USAGE: info "Information."
#

function message() {
  # echo -e "\n\e[34m$(timestamp)\e[0m $0: $@ \n" >&2
  echo -e "\n$FG[blue]$(timestamp) $FX[bold]$FG[yellow]$0$FX[no-bold]$FG[blue]:$FG[none] $@ \n" >&2
}

#
# Print a warning message to the term
#   USAGE: warn "Warning."
#

function warn() {
  # echo -e "\n\e[31m$(timestamp)\e[0m $0: $@ \n" >&2
  echo -e "\n$FG[red]$(timestamp) $FX[bold]$FG[yellow]$0$FX[no-bold]$FG[red]:$FG[none] $@ \n" >&2
}

#
# Exit while specifying a return code and message
#   USAGE: die 127 "Syntax Error."
#

function die() {
  local exit_code

  exit_code="$1"

  shift
  warn "$@"
  exit "${exit_code}"
}

#
# Command highlighting patterns
# NOTE: Requires syntax highlighting plugin
#

ZSH_HIGHLIGHT_PATTERNS+=('rm -rf *' 'fg=white,bold,bg=red')

#
# Ctrl+Z
#

function fancy-ctrl-z() {

  # On an empty command line. Run bg (so that Ctrl+Z Ctrl+Z suspends a program
  # and immediately resumes it in the background).
  if [[ $#BUFFER -eq 0 ]]; then
    bg
    zle redisplay

  # On a non-empty command line. Suspend the current command edition: let me
  # type another command, and when that second command line finished, I get back
  # the first command to edit.
  else
    zle push-line-or-edit
  fi
}

zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

#
# cd to directory of linked file
#

function cdln() {
  cd "$(dirname "$(readlink -f "$1")")" || exit
}

#
# Copy the current directory into the clipboard
#

function copydir() {
  if (( ! $+commands[pbcopy] )); then
    warn "pbcopy is not an available command."
    return
  fi

  pwd | tr -d "\r\n" | pbcopy
}

#
# Terminal-Velocity
#

function tv() {
  if (( ! $+commands[terminal_velocity] )); then
    warn "terminal_velocity is not an available command."
    return
  fi

  terminal_velocity
}

#
# Tmuxinator
#

tmuxinator="${HOME}/.tmuxinator/scripts/tmuxinator"

if [[ -s "$tmuxinator" ]]; then
  source "$tmuxinator"
fi

#
# Homebrew
#

function brews() {
  if (( ! $+commands[brew] )); then
    warn "brew is not an available command."
    return
  fi

  brew list -1
}

#
# cd to the directory a symlink is pointing to or that directory containing the
# file the symlink is pointing to
#

function cdlink() {
  for file in "$@"; do
    cd "${file}(:A:h)" || warn "Can't cd to $file"
  done
}

#
# Be paranoid, new files are readable/writable by me only, but not as root
#

# if [[ ${UID} -ne 0 ]]; then
  # umask 077
# fi

#
# Colorize stderr in red
#

# exec 2>>(
# while read X
# do
  # print "\e[91m${X}\e[0m" > /dev/tty
# done &
# )

#
# List the current SHELL (instead of the SHELL you started in)
#

function shell() {
  if (( ! $+commands[awk] )); then
    warn "brew is not an available command."
    return
  fi

  ps | grep "$$" | awk '{ print $4 }'
}

#
# Access the online help
#

unalias run-help
autoload run-help
export HELPDIR="/usr/local/share/zsh/helpfiles"

#
# Always use vim
#

if (( $+commands[vim] )); then

  # @ssh
  if [[ -n "${SSH_CLIENT}" || -n "${SSH2_CLIENT}" ]]; then
    alias vi='vim'
    alias mvim='vim'
    alias gvim='vim'

  # @local
  else

    # Use MacVim if available
    if (( $+commands[mvim] )); then
      alias vi='mvim'
      alias vim='mvim'
      alias gvim='mvim'

    # Use regular vim
    else
      alias vi='vim'
      alias mvim='vim'
      alias gvim='vim'
    fi
  fi
fi

#
# OS X Calendar
#

function ical() {
  if (( ! $+commands[icalBuddy] )); then
    warn "icalBuddy is not an available command."
    return
  fi

  icalBuddy -nc -n -f eventsToday+2
}

#
# WiFi
#
# Usage:
#	wifi on
#	wifi off
#

function wifi() {
  if (( ! $+commands[networksetup] )); then
    warn "networksetup is not an available command."
    return
  fi

  networksetup -setairportpower en1 "$@"
}

#
# Nino (weather)
#

function nino() {
  if (( ! $+commands[nino] )); then
    warn "nino is not an available command."
    return
  fi

  if (( ! $+WEATHER_ZIP )); then
    warn "WEATHER_ZIP must be set in your environment."
    return
  fi

  if (( ! $+WEATHER_WUNDERGROUND_API  )); then
    warn "WEATHER_WUNDERGROUND_API must be set in your environment."
    return
  fi

  nino "${WEATHER_WUNDERGROUND_API}" "${WEATHER_ZIP}"
}

#
# Deft
#

function nv() {
  if (( ! $+commands[emacs] )); then
    warn "emacs is not an available command."
    return
  fi

  emacs -f deft
}

#
# Ack
#

# Search with Ack, then open resulting files in vim
function ack2vim() {
  if (( ! $+commands[ack] )); then
    warn "ack is not an available command."
    return
  fi

  if (( ! $+commands[vim] )); then
    warn "vim is not an available command."
    return
  fi

  ack -li -- "$@" 2>/dev/null \
    | xargs -o "vim" -c "/$@"
}

#
# Internet troubleshooting
#

# Ping bing 100x.
function bing() {
  if (( ! $+commands[ping] )); then
    warn "ping is not an available command."
    return
  fi

  info "Pinging bing.com 100x"

  ping -c 100 "bing.com"
}

# Ping google 3x.
function poogle() {
  if (( ! $+commands[ping] )); then
    warn "ping is not an available command."
    return
  fi

  info "Pinging google.com 3x"

  ping -c 3 "google.com"
}

# Speedtest 500MB.
function speedtest() {
  if (( ! $+commands[wget] )); then
    warn "wget is not an available command."
    return
  fi

  wget --output-document="/dev/null" "http://speedtest.wdc01.softlayer.com/downloads/test500.zip"
}

# print out my IP address
function myip() {
  if (( ! $+commands[ifconfig] )); then
    warn "ifconfig is not an available command."
    return
  fi

  if (( ! $+commands[sed] )); then
    warn "sed is not an available command."
    return
  fi

  if (( ! $+commands[awk] )); then
    warn "awk is not an available command."
    return
  fi

  if (( ! $+commands[curl] )); then
    warn "curl is not an available command."
    return
  fi

  echo "public    : $(curl -s ip.appspot.com)"

  ifconfig lo0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "lo0       : " $2}'
  ifconfig en0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en0 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en0 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en0 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en1 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en1 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en1 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en1 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
}

#
# Xcode
#

function xcode() {
  local xcode

  xcode="/Developer/Applications/Xcode.app"

  if [[ -f "${xcode}" ]]; then
    warn "Xcode.app is not available installed."
    return
  fi

  open -a "${xcode}"
}

#
# Fuzzy Finder
#

if (( $+commands[fzf] )); then

  # Source config files
  if [[ -s "${HOME}/.fzf.zsh" ]]; then
    source "${HOME}/.fzf.zsh"
  fi

  # vimf - Open selected file in Vim
  function vimf() {
    local file

    file="$(fzf --query="$1")"

    vim "${file}"
  }

  # fd - cd to selected directory
  function fd() {
    local dir

    dir="$(find "${1:-*}" -path '*/\.*' -prune -o -type d -print 2> /dev/null | fzf +m)"

    cd "${dir}" || exit
  }

  # fda - including hidden directories
  function fda() {
    local dir

    dir="$(find "${1:-.}" -type d 2> /dev/null | fzf +m)"

    cd "${dir}" || exit
  }

  # fh - repeat history
  function fh() {
    eval "$(history 1 "$1" | fzf +s | sed 's/ *[0-9]* *//')"
  }

  # fkill - kill process
  function fkill() {
    ps -ef | sed 1d | fzf -m | awk '{print $2}' | xargs kill -"${1:-9}"
  }

  # fbr - checkout git branch
  function fbr() {
    local branches
    local branch

    branches="$(git branch)"
    branch="$(echo "${branches}" | fzf +s +m)"

    git checkout "${branch//.* //}"
  }

  # fco - checkout git commit
  function fco() {
    local commits
    local commit

    commits="$(git log --pretty=oneline --abbrev-commit --reverse)"
    commit="$(echo "${commits}" | fzf +s +m -e)"

    git checkout "${commit// .*//}"
  }

  # Immediately select the file when there's only one match. If not, start the fuzzy finder as usual.
  function fq1() {
    local lines

    lines="$(fzf --filter="$1" --no-sort)"

    if [ -z "${lines}" ]; then
      return 1
    elif [ "$(wc -l <<< "$lines")" -eq 1 ]; then
      echo "${lines}"
    else
      echo "${lines}" | fzf --query="$1"
    fi
  }

  # Open the selected file with the default editor
  # (Bypass fuzzy finder when there's only one match)
  function fe() {
    local file

    file="$(fq1 "$1")"

    "${EDITOR:-vim}" "$file"
  }
fi

#
# FORTRAN
#

function f95() {
  if (( ! $+commands[gfortran] )); then
    warn "gfortran is not an available command."
    return
  fi

  gfortran -std=f95
}

function f77() {
  if (( ! $+commands[gfortran] )); then
    warn "gfortran is not an available command."
    return
  fi

  gfortran -std=legacy
}

#
# Modules
#

myModules="/usr/local/opt/modules/Modules/init/zsh"

if [[ -s "${myModules}" ]]; then
  source "${myModules}"
fi

#
# dfc
#

function disk-usage() {
  if (( ! $+commands[dfc] )); then
    warn "dfc is not an available command."
    return
  fi

  dfc
}

#
# Tower
#

function tower() {
  if (( ! $+commands[gittower] )); then
    warn "gittower is not an available command."
    return
  fi

  if [[ $@ ]]; then
    gittower "$@"
  else
    gittower .
  fi
}

#
# Marked 2
#

function mark() {
  local marked

  marked="/Applications/Marked 2.app"

  if [[ -f "${marked}" ]]; then
    warn "Marked is not an available application."
    return
  fi

  if [[ $@ ]]; then
    open -a "${marked}" "$@"
  else
    open -a "${marked}"
  fi
}

#
# Save last command to clipboard and nvALT
#

function pbcopy-last {
  local nvalt_root

  # Set nvALT notes folder.
  nvalt_root="${HOME}/Dropbox/Notes"

  if (( ! $+commands[pbcopy] )); then
    warn "pbcopy is not an available command."
    return
  fi

  if (( ! $+commands[pbpaste] )); then
    warn "pbpaste is not an available command."
    return
  fi

  if (( ! $+commands[awk] )); then
    warn "awk is not an available command."
    return
  fi

  mkdir -p "${nvalt_root}"

  # Copy the command to the clipboard.
  history -1 | awk '{for (i=2; i<NF; i++) printf $i " "; print $NF}' | pbcopy

  # Make a new note for nvALT.
  echo "Press \"^C\" to copy to the pasteboard"
  echo "OR"
  echo "Type the title of the nvALT note you want to create, followed by [ENTER]:"
  read -r nvalt_note

  pbpaste >> "${nvalt_root}"/"${nvalt_note}"
}

export HISTSIZE=100000
export SAVEHIST=100000

#
# Print out line numbers
#

# Output a text file with line numbers
# http://brettterpstra.com/2015/11/24/shell-tricks-quick-line-numbering/
lno() {
  if (( ! $+commands[sed] )); then
    warn "sed is not an available command."
    return
  fi

  if (( $# == 0 )); then
    warn "No filename provided."
    return
  else
    sed = "$1" | paste -s -d '\t\n' - -
  fi
}

