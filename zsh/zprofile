#
# Executes commands at login pre-zshrc.
#

#
# DTerm
#

# if [[ "$TERM_PROGRAM" == "DTerm" ]]; then
# fi

#
# Hostname
# NOTE: HOSTNAME is (unfortunately) often called by external shell scripts and
# not having it set can be a problem.
#

if [[ -z "${HOSTNAME}" ]]; then
  export HOSTNAME="${HOST}"
fi

#
# Browser
#

if [[ "${OSTYPE}" == darwin* ]]; then
	export BROWSER="open"
fi

#
# Editors
#

export EDITOR="vi -e"
export VISUAL="vim"

#
# Pager
#

export PAGER="less"

#
# Language
#

if [[ -z "${LANG}" ]]; then
	export LANG="en_US.UTF-8"
fi

#
# Zsh custom directory
#

if [[ -d "${HOME}/.dotfiles/zsh" ]]; then
  export ZSH_CUSTOM="${HOME}/.dotfiles/zsh"
fi

#
# Temporary Files
#

export TMPDIR="/tmp/${USER}"
mkdir -p -m 700 "${TMPDIR}"

export TMPPREFIX="${TMPDIR%/}/zsh"
mkdir -p "${TMPPREFIX}"

#
# Go
#

if [[ -f "${HOME}/gocode" ]]; then
  export GOPATH="${HOME}/gocode"
fi

#
# Java
#

# export JAVA_HOME="$(/usr/libexec/java_home -v 1.7)"
if [[ -f "/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home" ]]; then
  export JAVA_HOME="/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home"
fi

#
# Less
#

# Set the default Less options.
# Mouse-wheel scrolling has been disabled by -X (disable screen clearing).
# Remove -X and -F (exit if the content fits on one screen) to enable it.
export LESS='-F -g -i -M -R -w -X -z-4'

# Set the Less input preprocessor.

# Use the highlight command.
if (( $+commands[highlight] )); then
  export LESSOPEN="| /usr/bin/env highlight %s --out-format ansi --quiet --force --style solarized-dark"

# Try both `lesspipe` and `lesspipe.sh` as either might exist on a system.
elif (( $#commands[(i)lesspipe(|.sh)] )); then
	export LESSOPEN="| /usr/bin/env $commands[(i)lesspipe(|.sh)] %s 2>&-"

elif [[ -f /usr/bin/src-hilite-lesspipe.sh ]]; then
	export LESSOPEN="| /usr/bin/src-hilite-lesspipe.sh %s 2>&-"

# Use Neovim's runtime highlighting.
elif [[ -f /usr/share/nvim/runtime/macros/less.sh ]]; then
	export LESSOPEN="| /usr/share/nvim/runtime/macros/less.sh 2>&-"

# Use Vim's runtime highlighting.
elif [[ -f /usr/share/vim/runtime/macros/less.sh ]]; then
	export LESSOPEN="| /usr/share/vim/runtime/macros/less.sh 2>&-"
fi

#
# Source private config files
#

if [[ -n "$(find "${HOME}/.dotfiles/zsh/profiles" -name '*.rc' -print -quit)" ]]; then
	for file in ${HOME}/.dotfiles/zsh/profiles/**/*.rc; do
		source "${file}"
	done
fi

#
# Docbook
#

if [[ -f "/usr/local/etc/xml/catalog" ]]; then
  export XML_CATALOG_FILES="/usr/local/etc/xml/catalog"
fi

#
# Cheat
#

if (( $+commands[cheat] )); then
  export CHEATCOLORS=true
fi

#
# Gaussian tools
#

if [[ -d "${HOME}/.dotfiles/gaussian-tools" ]]; then
  export GAUSSIAN_TOOLS_DIRECTORY="${HOME}/.dotfiles/gaussian-tools"
fi

#
# Paths
#

# Later we'll need to trim down the paths that follow because the ones given here are for all my accounts, some of which have unusual paths in them. rationalize-path will remove nonexistent directories from an array.
#	NOTE: this works only on arrays, not colon-delimited strings. Not that this is a problem now that there is typeset -T.
rationalize-path() {
	local element build

	build=()

	# Evil quoting to survive an eval and to make sure that this works even with variables containing IFS characters, if I'm crazy enough to setopt shwordsplit.
	eval '
	foreach element in "$'"$1"'[@]"; do
		if [[ -d "${element}" ]]; then
			build=("${build[@]}" "${element}")
		fi
	done

	'"$1"'=( "${build[@]}" )
	'
}

typeset -gU cdpath fpath mailpath path

# Set the list of directories that cd searches.
cdpath=(
	.
	"${cdpath[@]}"
)

export CDPATH
typeset -U cdpath # add only unique entries

# Path to search for autoloadable functions.
fpath=(
	"${HOME}/lib/zsh/func"
	"${fpath[@]}"
)

export FPATH

# Add only unique entries.
typeset -U fpath

# Set the list of directories that Zsh searches for programs.
# NOTE: Top items appear in PATH first
path=(
	${GAUSSIAN_TOOLS_DIRECTORY}
	${HOME}/{.bin,bin}
	${HOME}/.dotfiles/node_modules/.bin
	${HOME}/.linuxbrew/{bin,sbin}
	/usr/local/share/npm/bin
	/usr/local/mysql/bin
	/usr/local/MacGPG2/bin
	/usr/local/opt/ruby/bin
	/usr/local/opt/go/libexec/bin
	/usr/local/{bin,sbin}
	/opt/openmpi/bin
	/usr/lib64/qt-3.3/bin
	/opt/eclipse
	/opt/ganglia/{bin,sbin}
	/usr/java/latest/bin
	/opt/maven/bin
	/opt/maui/bin
	/opt/torque/{bin,sbin}
	/opt/pdsh/bin
	/opt/rocks/{bin,sbin}
	/opt/gridengine/bin/linux-x64
	/opt/X11/bin
	/usr/libexec
	/usr/X11/bin
	/usr/texbin
	/usr/{bin,sbin}
	/{bin,sbin}
	"${path[@]}"
	"${fpath[@]}"
)

export PATH

# Add only unique entries.
typeset -U path

# Remove entries that don't exist on this system -- just for sanity's sake more
# than anything.
rationalize-path path

# Set the list of directories that Zsh searches for manuals.
# NOTE: Top items appear in PATH first
manpath=(
	${HOME}/{.man,man}
	${HOME}/.linuxbrew/share/man
	/usr/local/git/man
	/usr/local/mysql/man
	/usr/local/{man,sbin}
	/share/utils/MPI/openmpi/intel/1.6.5/share/man
	/share/utils/INTEL/intel13/composerxe/man/en_US
	/share/utils/INTEL/intel13/composerxe/mkl/man/en_US
	/usr/share/man
	/usr/man/preformat
	/usr/man
	/usr/X11/man
	"${manpath[@]}"
)

export MANPATH

# Add only unique entries.
typeset -U manpath

# Remove entries that don't exist on this system -- just for sanity's sake more
# than anything.
rationalize-path manpath

# Set the list of directories that Zsh searches for info.
# NOTE: Top items appear in PATH first
infopath=(
	${HOME}/.linuxbrew/share/info
	"$infopath[@]"
)

export INFOPATH

# Add only unique entries.
typeset -U infopath

# Remove entries that don't exist on this system -- just for sanity's sake more
# than anything.
rationalize-path infopath

# vim: set filetype=zsh:
